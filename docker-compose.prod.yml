services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vehicle-tracker-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: vehicle_tracker
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - vehicle-tracker-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d vehicle_tracker"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Vehicle Tracker API
  api:
    image: ${DOCKER_USERNAME}/vehicle-tracker-backend:latest
    container_name: vehicle-tracker-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/vehicle_tracker
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_EXPIRES_IN: 15m
      JWT_REFRESH_EXPIRES_IN: 7d
      PORT: 3000
      CORS_ORIGIN: https://${DOMAIN}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - vehicle-tracker-network
    volumes:
      - ./uploads:/app/uploads
    command: >
      sh -c "
        echo 'Running database migrations...' &&
        npx prisma migrate deploy &&
        echo 'Starting application...' &&
        npm start
      "

  # Vehicle Tracker Frontend
  frontend:
    image: ${DOCKER_USERNAME}/vehicle-tracker-frontend:latest
    container_name: vehicle-tracker-frontend
    restart: unless-stopped
    depends_on:
      - api
    networks:
      - vehicle-tracker-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: vehicle-tracker-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./uploads:/var/www/uploads:ro
    depends_on:
      - api
      - frontend
    networks:
      - vehicle-tracker-network

volumes:
  postgres_data:
    driver: local

networks:
  vehicle-tracker-network:
    driver: bridge
